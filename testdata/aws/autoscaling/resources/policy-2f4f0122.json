{
    "properties": {
        "adjustmentType": {
            "type": "string",
            "description": "Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.\n"
        },
        "arn": {
            "type": "string",
            "description": "ARN assigned by AWS to the scaling policy.\n"
        },
        "autoscalingGroupName": {
            "type": "string",
            "description": "Name of the autoscaling group.\n"
        },
        "cooldown": {
            "type": "integer",
            "description": "Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.\n"
        },
        "enabled": {
            "type": "boolean",
            "description": "Whether the scaling policy is enabled or disabled. Default: `true`.\n\nThe following argument is only available to \"SimpleScaling\" and \"StepScaling\" type policies:\n"
        },
        "estimatedInstanceWarmup": {
            "type": "integer",
            "description": "Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.\n"
        },
        "metricAggregationType": {
            "type": "string",
            "description": "Aggregation type for the policy's metrics. Valid values are \"Minimum\", \"Maximum\", and \"Average\". Without a value, AWS will treat the aggregation type as \"Average\".\n"
        },
        "minAdjustmentMagnitude": {
            "type": "integer",
            "description": "Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.\n\nThe following arguments are only available to \"SimpleScaling\" type policies:\n"
        },
        "name": {
            "type": "string",
            "description": "Name of the policy.\n"
        },
        "policyType": {
            "type": "string",
            "description": "Policy type, either \"SimpleScaling\", \"StepScaling\", \"TargetTrackingScaling\", or \"PredictiveScaling\". If this value isn't provided, AWS will default to \"SimpleScaling.\"\n"
        },
        "predictiveScalingConfiguration": {
            "$ref": "#/types/aws:autoscaling/PolicyPredictiveScalingConfiguration:PolicyPredictiveScalingConfiguration",
            "description": "Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.\n"
        },
        "scalingAdjustment": {
            "type": "integer",
            "description": "Number of members by which to\nscale, when the adjustment bounds are breached. A positive value scales\nup. A negative value scales down.\n"
        },
        "stepAdjustments": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:autoscaling/PolicyStepAdjustment:PolicyStepAdjustment"
            },
            "description": "Set of adjustments that manage\ngroup scaling. These have the following structure:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.autoscaling.Policy(\"example\", {stepAdjustments: [\n    {\n        metricIntervalLowerBound: \"1\",\n        metricIntervalUpperBound: \"2\",\n        scalingAdjustment: -1,\n    },\n    {\n        metricIntervalLowerBound: \"2\",\n        metricIntervalUpperBound: \"3\",\n        scalingAdjustment: 1,\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.autoscaling.Policy(\"example\", step_adjustments=[\n    aws.autoscaling.PolicyStepAdjustmentArgs(\n        metric_interval_lower_bound=\"1\",\n        metric_interval_upper_bound=\"2\",\n        scaling_adjustment=-1,\n    ),\n    aws.autoscaling.PolicyStepAdjustmentArgs(\n        metric_interval_lower_bound=\"2\",\n        metric_interval_upper_bound=\"3\",\n        scaling_adjustment=1,\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Aws.AutoScaling.Policy(\"example\", new()\n    {\n        StepAdjustments = new[]\n        {\n            new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs\n            {\n                MetricIntervalLowerBound = \"1\",\n                MetricIntervalUpperBound = \"2\",\n                ScalingAdjustment = -1,\n            },\n            new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs\n            {\n                MetricIntervalLowerBound = \"2\",\n                MetricIntervalUpperBound = \"3\",\n                ScalingAdjustment = 1,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewPolicy(ctx, \"example\", \u0026autoscaling.PolicyArgs{\n\t\t\tStepAdjustments: autoscaling.PolicyStepAdjustmentArray{\n\t\t\t\t\u0026autoscaling.PolicyStepAdjustmentArgs{\n\t\t\t\t\tMetricIntervalLowerBound: pulumi.String(\"1\"),\n\t\t\t\t\tMetricIntervalUpperBound: pulumi.String(\"2\"),\n\t\t\t\t\tScalingAdjustment:        -1,\n\t\t\t\t},\n\t\t\t\t\u0026autoscaling.PolicyStepAdjustmentArgs{\n\t\t\t\t\tMetricIntervalLowerBound: pulumi.String(\"2\"),\n\t\t\t\t\tMetricIntervalUpperBound: pulumi.String(\"3\"),\n\t\t\t\t\tScalingAdjustment:        pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nThe following fields are available in step adjustments:\n"
        },
        "targetTrackingConfiguration": {
            "$ref": "#/types/aws:autoscaling/PolicyTargetTrackingConfiguration:PolicyTargetTrackingConfiguration",
            "description": "Target tracking policy. These have the following structure:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.autoscaling.Policy(\"example\", {targetTrackingConfiguration: {\n    predefinedMetricSpecification: {\n        predefinedMetricType: \"ASGAverageCPUUtilization\",\n    },\n    targetValue: 40,\n}});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.autoscaling.Policy(\"example\", target_tracking_configuration=aws.autoscaling.PolicyTargetTrackingConfigurationArgs(\n    predefined_metric_specification=aws.autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs(\n        predefined_metric_type=\"ASGAverageCPUUtilization\",\n    ),\n    target_value=40,\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Aws.AutoScaling.Policy(\"example\", new()\n    {\n        TargetTrackingConfiguration = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationArgs\n        {\n            PredefinedMetricSpecification = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs\n            {\n                PredefinedMetricType = \"ASGAverageCPUUtilization\",\n            },\n            TargetValue = 40,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewPolicy(ctx, \"example\", \u0026autoscaling.PolicyArgs{\n\t\t\tTargetTrackingConfiguration: \u0026autoscaling.PolicyTargetTrackingConfigurationArgs{\n\t\t\t\tPredefinedMetricSpecification: \u0026autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{\n\t\t\t\t\tPredefinedMetricType: pulumi.String(\"ASGAverageCPUUtilization\"),\n\t\t\t\t},\n\t\t\t\tTargetValue: pulumi.Float64(40),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.autoscaling.Policy;\nimport com.pulumi.aws.autoscaling.PolicyArgs;\nimport com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationArgs;\nimport com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Policy(\"example\", PolicyArgs.builder()        \n            .targetTrackingConfiguration(PolicyTargetTrackingConfigurationArgs.builder()\n                .predefinedMetricSpecification(PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs.builder()\n                    .predefinedMetricType(\"ASGAverageCPUUtilization\")\n                    .build())\n                .targetValue(40)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:autoscaling:Policy\n    properties:\n      targetTrackingConfiguration:\n        predefinedMetricSpecification:\n          predefinedMetricType: ASGAverageCPUUtilization\n        targetValue: 40\n```\n\nThe following fields are available in target tracking configuration:\n"
        }
    },
    "required": [
        "arn",
        "autoscalingGroupName",
        "metricAggregationType",
        "name"
    ],
    "inputProperties": {
        "adjustmentType": {
            "type": "string",
            "description": "Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.\n"
        },
        "autoscalingGroupName": {
            "type": "string",
            "description": "Name of the autoscaling group.\n",
            "willReplaceOnChanges": true
        },
        "cooldown": {
            "type": "integer",
            "description": "Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.\n"
        },
        "enabled": {
            "type": "boolean",
            "description": "Whether the scaling policy is enabled or disabled. Default: `true`.\n\nThe following argument is only available to \"SimpleScaling\" and \"StepScaling\" type policies:\n"
        },
        "estimatedInstanceWarmup": {
            "type": "integer",
            "description": "Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.\n"
        },
        "metricAggregationType": {
            "type": "string",
            "description": "Aggregation type for the policy's metrics. Valid values are \"Minimum\", \"Maximum\", and \"Average\". Without a value, AWS will treat the aggregation type as \"Average\".\n"
        },
        "minAdjustmentMagnitude": {
            "type": "integer",
            "description": "Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.\n\nThe following arguments are only available to \"SimpleScaling\" type policies:\n"
        },
        "name": {
            "type": "string",
            "description": "Name of the policy.\n",
            "willReplaceOnChanges": true
        },
        "policyType": {
            "type": "string",
            "description": "Policy type, either \"SimpleScaling\", \"StepScaling\", \"TargetTrackingScaling\", or \"PredictiveScaling\". If this value isn't provided, AWS will default to \"SimpleScaling.\"\n"
        },
        "predictiveScalingConfiguration": {
            "$ref": "#/types/aws:autoscaling/PolicyPredictiveScalingConfiguration:PolicyPredictiveScalingConfiguration",
            "description": "Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.\n"
        },
        "scalingAdjustment": {
            "type": "integer",
            "description": "Number of members by which to\nscale, when the adjustment bounds are breached. A positive value scales\nup. A negative value scales down.\n"
        },
        "stepAdjustments": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:autoscaling/PolicyStepAdjustment:PolicyStepAdjustment"
            },
            "description": "Set of adjustments that manage\ngroup scaling. These have the following structure:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.autoscaling.Policy(\"example\", {stepAdjustments: [\n    {\n        metricIntervalLowerBound: \"1\",\n        metricIntervalUpperBound: \"2\",\n        scalingAdjustment: -1,\n    },\n    {\n        metricIntervalLowerBound: \"2\",\n        metricIntervalUpperBound: \"3\",\n        scalingAdjustment: 1,\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.autoscaling.Policy(\"example\", step_adjustments=[\n    aws.autoscaling.PolicyStepAdjustmentArgs(\n        metric_interval_lower_bound=\"1\",\n        metric_interval_upper_bound=\"2\",\n        scaling_adjustment=-1,\n    ),\n    aws.autoscaling.PolicyStepAdjustmentArgs(\n        metric_interval_lower_bound=\"2\",\n        metric_interval_upper_bound=\"3\",\n        scaling_adjustment=1,\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Aws.AutoScaling.Policy(\"example\", new()\n    {\n        StepAdjustments = new[]\n        {\n            new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs\n            {\n                MetricIntervalLowerBound = \"1\",\n                MetricIntervalUpperBound = \"2\",\n                ScalingAdjustment = -1,\n            },\n            new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs\n            {\n                MetricIntervalLowerBound = \"2\",\n                MetricIntervalUpperBound = \"3\",\n                ScalingAdjustment = 1,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewPolicy(ctx, \"example\", \u0026autoscaling.PolicyArgs{\n\t\t\tStepAdjustments: autoscaling.PolicyStepAdjustmentArray{\n\t\t\t\t\u0026autoscaling.PolicyStepAdjustmentArgs{\n\t\t\t\t\tMetricIntervalLowerBound: pulumi.String(\"1\"),\n\t\t\t\t\tMetricIntervalUpperBound: pulumi.String(\"2\"),\n\t\t\t\t\tScalingAdjustment:        -1,\n\t\t\t\t},\n\t\t\t\t\u0026autoscaling.PolicyStepAdjustmentArgs{\n\t\t\t\t\tMetricIntervalLowerBound: pulumi.String(\"2\"),\n\t\t\t\t\tMetricIntervalUpperBound: pulumi.String(\"3\"),\n\t\t\t\t\tScalingAdjustment:        pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nThe following fields are available in step adjustments:\n"
        },
        "targetTrackingConfiguration": {
            "$ref": "#/types/aws:autoscaling/PolicyTargetTrackingConfiguration:PolicyTargetTrackingConfiguration",
            "description": "Target tracking policy. These have the following structure:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.autoscaling.Policy(\"example\", {targetTrackingConfiguration: {\n    predefinedMetricSpecification: {\n        predefinedMetricType: \"ASGAverageCPUUtilization\",\n    },\n    targetValue: 40,\n}});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.autoscaling.Policy(\"example\", target_tracking_configuration=aws.autoscaling.PolicyTargetTrackingConfigurationArgs(\n    predefined_metric_specification=aws.autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs(\n        predefined_metric_type=\"ASGAverageCPUUtilization\",\n    ),\n    target_value=40,\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Aws.AutoScaling.Policy(\"example\", new()\n    {\n        TargetTrackingConfiguration = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationArgs\n        {\n            PredefinedMetricSpecification = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs\n            {\n                PredefinedMetricType = \"ASGAverageCPUUtilization\",\n            },\n            TargetValue = 40,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewPolicy(ctx, \"example\", \u0026autoscaling.PolicyArgs{\n\t\t\tTargetTrackingConfiguration: \u0026autoscaling.PolicyTargetTrackingConfigurationArgs{\n\t\t\t\tPredefinedMetricSpecification: \u0026autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{\n\t\t\t\t\tPredefinedMetricType: pulumi.String(\"ASGAverageCPUUtilization\"),\n\t\t\t\t},\n\t\t\t\tTargetValue: pulumi.Float64(40),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.autoscaling.Policy;\nimport com.pulumi.aws.autoscaling.PolicyArgs;\nimport com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationArgs;\nimport com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Policy(\"example\", PolicyArgs.builder()        \n            .targetTrackingConfiguration(PolicyTargetTrackingConfigurationArgs.builder()\n                .predefinedMetricSpecification(PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs.builder()\n                    .predefinedMetricType(\"ASGAverageCPUUtilization\")\n                    .build())\n                .targetValue(40)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:autoscaling:Policy\n    properties:\n      targetTrackingConfiguration:\n        predefinedMetricSpecification:\n          predefinedMetricType: ASGAverageCPUUtilization\n        targetValue: 40\n```\n\nThe following fields are available in target tracking configuration:\n"
        }
    },
    "requiredInputs": [
        "autoscalingGroupName"
    ],
    "stateInputs": {
        "description": "Input properties used for looking up and filtering Policy resources.\n",
        "properties": {
            "adjustmentType": {
                "type": "string",
                "description": "Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.\n"
            },
            "arn": {
                "type": "string",
                "description": "ARN assigned by AWS to the scaling policy.\n"
            },
            "autoscalingGroupName": {
                "type": "string",
                "description": "Name of the autoscaling group.\n",
                "willReplaceOnChanges": true
            },
            "cooldown": {
                "type": "integer",
                "description": "Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.\n"
            },
            "enabled": {
                "type": "boolean",
                "description": "Whether the scaling policy is enabled or disabled. Default: `true`.\n\nThe following argument is only available to \"SimpleScaling\" and \"StepScaling\" type policies:\n"
            },
            "estimatedInstanceWarmup": {
                "type": "integer",
                "description": "Estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.\n"
            },
            "metricAggregationType": {
                "type": "string",
                "description": "Aggregation type for the policy's metrics. Valid values are \"Minimum\", \"Maximum\", and \"Average\". Without a value, AWS will treat the aggregation type as \"Average\".\n"
            },
            "minAdjustmentMagnitude": {
                "type": "integer",
                "description": "Minimum value to scale by when `adjustment_type` is set to `PercentChangeInCapacity`.\n\nThe following arguments are only available to \"SimpleScaling\" type policies:\n"
            },
            "name": {
                "type": "string",
                "description": "Name of the policy.\n",
                "willReplaceOnChanges": true
            },
            "policyType": {
                "type": "string",
                "description": "Policy type, either \"SimpleScaling\", \"StepScaling\", \"TargetTrackingScaling\", or \"PredictiveScaling\". If this value isn't provided, AWS will default to \"SimpleScaling.\"\n"
            },
            "predictiveScalingConfiguration": {
                "$ref": "#/types/aws:autoscaling/PolicyPredictiveScalingConfiguration:PolicyPredictiveScalingConfiguration",
                "description": "Predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.\n"
            },
            "scalingAdjustment": {
                "type": "integer",
                "description": "Number of members by which to\nscale, when the adjustment bounds are breached. A positive value scales\nup. A negative value scales down.\n"
            },
            "stepAdjustments": {
                "type": "array",
                "items": {
                    "$ref": "#/types/aws:autoscaling/PolicyStepAdjustment:PolicyStepAdjustment"
                },
                "description": "Set of adjustments that manage\ngroup scaling. These have the following structure:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.autoscaling.Policy(\"example\", {stepAdjustments: [\n    {\n        metricIntervalLowerBound: \"1\",\n        metricIntervalUpperBound: \"2\",\n        scalingAdjustment: -1,\n    },\n    {\n        metricIntervalLowerBound: \"2\",\n        metricIntervalUpperBound: \"3\",\n        scalingAdjustment: 1,\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.autoscaling.Policy(\"example\", step_adjustments=[\n    aws.autoscaling.PolicyStepAdjustmentArgs(\n        metric_interval_lower_bound=\"1\",\n        metric_interval_upper_bound=\"2\",\n        scaling_adjustment=-1,\n    ),\n    aws.autoscaling.PolicyStepAdjustmentArgs(\n        metric_interval_lower_bound=\"2\",\n        metric_interval_upper_bound=\"3\",\n        scaling_adjustment=1,\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Aws.AutoScaling.Policy(\"example\", new()\n    {\n        StepAdjustments = new[]\n        {\n            new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs\n            {\n                MetricIntervalLowerBound = \"1\",\n                MetricIntervalUpperBound = \"2\",\n                ScalingAdjustment = -1,\n            },\n            new Aws.AutoScaling.Inputs.PolicyStepAdjustmentArgs\n            {\n                MetricIntervalLowerBound = \"2\",\n                MetricIntervalUpperBound = \"3\",\n                ScalingAdjustment = 1,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewPolicy(ctx, \"example\", \u0026autoscaling.PolicyArgs{\n\t\t\tStepAdjustments: autoscaling.PolicyStepAdjustmentArray{\n\t\t\t\t\u0026autoscaling.PolicyStepAdjustmentArgs{\n\t\t\t\t\tMetricIntervalLowerBound: pulumi.String(\"1\"),\n\t\t\t\t\tMetricIntervalUpperBound: pulumi.String(\"2\"),\n\t\t\t\t\tScalingAdjustment:        -1,\n\t\t\t\t},\n\t\t\t\t\u0026autoscaling.PolicyStepAdjustmentArgs{\n\t\t\t\t\tMetricIntervalLowerBound: pulumi.String(\"2\"),\n\t\t\t\t\tMetricIntervalUpperBound: pulumi.String(\"3\"),\n\t\t\t\t\tScalingAdjustment:        pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nThe following fields are available in step adjustments:\n"
            },
            "targetTrackingConfiguration": {
                "$ref": "#/types/aws:autoscaling/PolicyTargetTrackingConfiguration:PolicyTargetTrackingConfiguration",
                "description": "Target tracking policy. These have the following structure:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.autoscaling.Policy(\"example\", {targetTrackingConfiguration: {\n    predefinedMetricSpecification: {\n        predefinedMetricType: \"ASGAverageCPUUtilization\",\n    },\n    targetValue: 40,\n}});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.autoscaling.Policy(\"example\", target_tracking_configuration=aws.autoscaling.PolicyTargetTrackingConfigurationArgs(\n    predefined_metric_specification=aws.autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs(\n        predefined_metric_type=\"ASGAverageCPUUtilization\",\n    ),\n    target_value=40,\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Aws.AutoScaling.Policy(\"example\", new()\n    {\n        TargetTrackingConfiguration = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationArgs\n        {\n            PredefinedMetricSpecification = new Aws.AutoScaling.Inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs\n            {\n                PredefinedMetricType = \"ASGAverageCPUUtilization\",\n            },\n            TargetValue = 40,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := autoscaling.NewPolicy(ctx, \"example\", \u0026autoscaling.PolicyArgs{\n\t\t\tTargetTrackingConfiguration: \u0026autoscaling.PolicyTargetTrackingConfigurationArgs{\n\t\t\t\tPredefinedMetricSpecification: \u0026autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs{\n\t\t\t\t\tPredefinedMetricType: pulumi.String(\"ASGAverageCPUUtilization\"),\n\t\t\t\t},\n\t\t\t\tTargetValue: pulumi.Float64(40),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.autoscaling.Policy;\nimport com.pulumi.aws.autoscaling.PolicyArgs;\nimport com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationArgs;\nimport com.pulumi.aws.autoscaling.inputs.PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Policy(\"example\", PolicyArgs.builder()        \n            .targetTrackingConfiguration(PolicyTargetTrackingConfigurationArgs.builder()\n                .predefinedMetricSpecification(PolicyTargetTrackingConfigurationPredefinedMetricSpecificationArgs.builder()\n                    .predefinedMetricType(\"ASGAverageCPUUtilization\")\n                    .build())\n                .targetValue(40)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:autoscaling:Policy\n    properties:\n      targetTrackingConfiguration:\n        predefinedMetricSpecification:\n          predefinedMetricType: ASGAverageCPUUtilization\n        targetValue: 40\n```\n\nThe following fields are available in target tracking configuration:\n"
            }
        },
        "type": "object"
    }
}