{
    "properties": {
        "arn": {
            "type": "string",
            "description": "ARN for this Auto Scaling Group\n"
        },
        "availabilityZones": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpc_zone_identifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpc_zone_identifier`.\n"
        },
        "capacityRebalance": {
            "type": "boolean",
            "description": "Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.\n"
        },
        "context": {
            "type": "string",
            "description": "Reserved.\n"
        },
        "defaultCooldown": {
            "type": "integer",
            "description": "Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.\n"
        },
        "defaultInstanceWarmup": {
            "type": "integer",
            "description": "Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))\n"
        },
        "desiredCapacity": {
            "type": "integer",
            "description": "Number of Amazon EC2 instances that\nshould be running in the group. (See also Waiting for\nCapacity below.)\n"
        },
        "desiredCapacityType": {
            "type": "string",
            "description": "The unit of measurement for the value specified for `desired_capacity`. Supported for attribute-based instance type selection only. Valid values: `\"units\"`, `\"vcpu\"`, `\"memory-mib\"`.\n"
        },
        "enabledMetrics": {
            "type": "array",
            "items": {
                "type": "string",
                "$ref": "#/types/aws:autoscaling/metrics:Metric"
            },
            "description": "List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).\n"
        },
        "forceDelete": {
            "type": "boolean",
            "description": "Allows deleting the Auto Scaling Group without waiting\nfor all instances in the pool to terminate. You can force an Auto Scaling Group to delete\neven if it's in the process of scaling a resource. Normally, this provider\ndrains all the instances before deleting the group. This bypasses that\nbehavior and potentially leaves resources dangling.\n"
        },
        "forceDeleteWarmPool": {
            "type": "boolean",
            "description": "Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.\n"
        },
        "healthCheckGracePeriod": {
            "type": "integer",
            "description": "Time (in seconds) after instance comes into service before checking health.\n"
        },
        "healthCheckType": {
            "type": "string",
            "description": "\"EC2\" or \"ELB\". Controls how health checking is done.\n"
        },
        "ignoreFailedScalingActivities": {
            "type": "boolean",
            "description": "Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.\n"
        },
        "initialLifecycleHooks": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:autoscaling/GroupInitialLifecycleHook:GroupInitialLifecycleHook"
            },
            "description": "One or more\n[Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)\nto attach to the Auto Scaling Group **before** instances are launched. The\nsyntax is exactly the same as the separate\n`aws.autoscaling.LifecycleHook`\nresource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating\na new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.\n"
        },
        "instanceMaintenancePolicy": {
            "$ref": "#/types/aws:autoscaling/GroupInstanceMaintenancePolicy:GroupInstanceMaintenancePolicy",
            "description": "If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.\n"
        },
        "instanceRefresh": {
            "$ref": "#/types/aws:autoscaling/GroupInstanceRefresh:GroupInstanceRefresh",
            "description": "If this block is configured, start an\n[Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)\nwhen this Auto Scaling Group is updated. Defined below.\n"
        },
        "launchConfiguration": {
            "type": "string",
            "description": "Name of the launch configuration to use.\n"
        },
        "launchTemplate": {
            "$ref": "#/types/aws:autoscaling/GroupLaunchTemplate:GroupLaunchTemplate",
            "description": "Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.\n"
        },
        "loadBalancers": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of elastic load balancer names to add to the autoscaling\ngroup names. Only valid for classic load balancers. For ALBs, use `target_group_arns` instead. To remove all load balancer attachments an empty list should be specified.\n"
        },
        "maxInstanceLifetime": {
            "type": "integer",
            "description": "Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.\n"
        },
        "maxSize": {
            "type": "integer",
            "description": "Maximum size of the Auto Scaling Group.\n"
        },
        "metricsGranularity": {
            "type": "string",
            "description": "Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.\n"
        },
        "minElbCapacity": {
            "type": "integer",
            "description": "Setting this causes Pulumi to wait for\nthis number of instances from this Auto Scaling Group to show up healthy in the\nELB only on creation. Updates will not wait on ELB instance number changes.\n(See also Waiting for Capacity below.)\n"
        },
        "minSize": {
            "type": "integer",
            "description": "Minimum size of the Auto Scaling Group.\n(See also Waiting for Capacity below.)\n"
        },
        "mixedInstancesPolicy": {
            "$ref": "#/types/aws:autoscaling/GroupMixedInstancesPolicy:GroupMixedInstancesPolicy",
            "description": "Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.\n"
        },
        "name": {
            "type": "string",
            "description": "Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `name_prefix`.\n"
        },
        "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n"
        },
        "placementGroup": {
            "type": "string",
            "description": "Name of the placement group into which you'll launch your instances, if any.\n"
        },
        "predictedCapacity": {
            "type": "integer",
            "description": "Predicted capacity of the group.\n"
        },
        "protectFromScaleIn": {
            "type": "boolean",
            "description": "Whether newly launched instances\nare automatically protected from termination by Amazon EC2 Auto Scaling when\nscaling in. For more information about preventing instances from terminating\non scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)\nin the Amazon EC2 Auto Scaling User Guide.\n"
        },
        "serviceLinkedRoleArn": {
            "type": "string",
            "description": "ARN of the service-linked role that the ASG will use to call other AWS services\n"
        },
        "suspendedProcesses": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.\nNote that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.\n"
        },
        "tags": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:autoscaling/GroupTag:GroupTag"
            },
            "description": "Configuration block(s) containing resource tags. See Tag below for more details.\n"
        },
        "targetGroupArns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "Set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.\n"
        },
        "terminationPolicies": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.\n"
        },
        "trafficSources": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:autoscaling/GroupTrafficSource:GroupTrafficSource"
            },
            "description": "Attaches one or more traffic sources to the specified Auto Scaling group.\n"
        },
        "vpcZoneIdentifiers": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availability_zones`.\n"
        },
        "waitForCapacityTimeout": {
            "type": "string",
            "description": "Maximum\n[duration](https://golang.org/pkg/time/#ParseDuration) that the provider should\nwait for ASG instances to be healthy before timing out. (See also Waiting\nfor Capacity below.) Setting this to \"0\" causes\nthe provider to skip all Capacity Waiting behavior.\n"
        },
        "waitForElbCapacity": {
            "type": "integer",
            "description": "Setting this will cause Pulumi to wait\nfor exactly this number of healthy instances from this Auto Scaling Group in\nall attached load balancers on both create and update operations. (Takes\nprecedence over `min_elb_capacity` behavior.)\n(See also Waiting for Capacity below.)\n"
        },
        "warmPool": {
            "$ref": "#/types/aws:autoscaling/GroupWarmPool:GroupWarmPool",
            "description": "If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)\nto the specified Auto Scaling group. Defined below\n"
        },
        "warmPoolSize": {
            "type": "integer",
            "description": "Current size of the warm pool.\n"
        }
    },
    "required": [
        "arn",
        "availabilityZones",
        "defaultCooldown",
        "desiredCapacity",
        "healthCheckType",
        "launchTemplate",
        "loadBalancers",
        "maxSize",
        "minSize",
        "mixedInstancesPolicy",
        "name",
        "namePrefix",
        "predictedCapacity",
        "serviceLinkedRoleArn",
        "targetGroupArns",
        "trafficSources",
        "vpcZoneIdentifiers",
        "warmPoolSize"
    ],
    "inputProperties": {
        "availabilityZones": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpc_zone_identifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpc_zone_identifier`.\n"
        },
        "capacityRebalance": {
            "type": "boolean",
            "description": "Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.\n"
        },
        "context": {
            "type": "string",
            "description": "Reserved.\n"
        },
        "defaultCooldown": {
            "type": "integer",
            "description": "Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.\n"
        },
        "defaultInstanceWarmup": {
            "type": "integer",
            "description": "Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))\n"
        },
        "desiredCapacity": {
            "type": "integer",
            "description": "Number of Amazon EC2 instances that\nshould be running in the group. (See also Waiting for\nCapacity below.)\n"
        },
        "desiredCapacityType": {
            "type": "string",
            "description": "The unit of measurement for the value specified for `desired_capacity`. Supported for attribute-based instance type selection only. Valid values: `\"units\"`, `\"vcpu\"`, `\"memory-mib\"`.\n"
        },
        "enabledMetrics": {
            "type": "array",
            "items": {
                "type": "string",
                "$ref": "#/types/aws:autoscaling/metrics:Metric"
            },
            "description": "List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).\n"
        },
        "forceDelete": {
            "type": "boolean",
            "description": "Allows deleting the Auto Scaling Group without waiting\nfor all instances in the pool to terminate. You can force an Auto Scaling Group to delete\neven if it's in the process of scaling a resource. Normally, this provider\ndrains all the instances before deleting the group. This bypasses that\nbehavior and potentially leaves resources dangling.\n"
        },
        "forceDeleteWarmPool": {
            "type": "boolean",
            "description": "Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.\n"
        },
        "healthCheckGracePeriod": {
            "type": "integer",
            "description": "Time (in seconds) after instance comes into service before checking health.\n"
        },
        "healthCheckType": {
            "type": "string",
            "description": "\"EC2\" or \"ELB\". Controls how health checking is done.\n"
        },
        "ignoreFailedScalingActivities": {
            "type": "boolean",
            "description": "Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.\n"
        },
        "initialLifecycleHooks": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:autoscaling/GroupInitialLifecycleHook:GroupInitialLifecycleHook"
            },
            "description": "One or more\n[Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)\nto attach to the Auto Scaling Group **before** instances are launched. The\nsyntax is exactly the same as the separate\n`aws.autoscaling.LifecycleHook`\nresource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating\na new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.\n",
            "willReplaceOnChanges": true
        },
        "instanceMaintenancePolicy": {
            "$ref": "#/types/aws:autoscaling/GroupInstanceMaintenancePolicy:GroupInstanceMaintenancePolicy",
            "description": "If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.\n"
        },
        "instanceRefresh": {
            "$ref": "#/types/aws:autoscaling/GroupInstanceRefresh:GroupInstanceRefresh",
            "description": "If this block is configured, start an\n[Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)\nwhen this Auto Scaling Group is updated. Defined below.\n"
        },
        "launchConfiguration": {
            "type": "string",
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "string",
                    "$ref": "#/types/aws:ec2/launchConfiguration:LaunchConfiguration"
                }
            ],
            "description": "Name of the launch configuration to use.\n"
        },
        "launchTemplate": {
            "$ref": "#/types/aws:autoscaling/GroupLaunchTemplate:GroupLaunchTemplate",
            "description": "Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.\n"
        },
        "loadBalancers": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of elastic load balancer names to add to the autoscaling\ngroup names. Only valid for classic load balancers. For ALBs, use `target_group_arns` instead. To remove all load balancer attachments an empty list should be specified.\n"
        },
        "maxInstanceLifetime": {
            "type": "integer",
            "description": "Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.\n"
        },
        "maxSize": {
            "type": "integer",
            "description": "Maximum size of the Auto Scaling Group.\n"
        },
        "metricsGranularity": {
            "type": "string",
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "string",
                    "$ref": "#/types/aws:autoscaling/MetricsGranularity:MetricsGranularity"
                }
            ],
            "description": "Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.\n"
        },
        "minElbCapacity": {
            "type": "integer",
            "description": "Setting this causes Pulumi to wait for\nthis number of instances from this Auto Scaling Group to show up healthy in the\nELB only on creation. Updates will not wait on ELB instance number changes.\n(See also Waiting for Capacity below.)\n"
        },
        "minSize": {
            "type": "integer",
            "description": "Minimum size of the Auto Scaling Group.\n(See also Waiting for Capacity below.)\n"
        },
        "mixedInstancesPolicy": {
            "$ref": "#/types/aws:autoscaling/GroupMixedInstancesPolicy:GroupMixedInstancesPolicy",
            "description": "Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.\n"
        },
        "name": {
            "type": "string",
            "description": "Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `name_prefix`.\n",
            "willReplaceOnChanges": true
        },
        "namePrefix": {
            "type": "string",
            "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n",
            "willReplaceOnChanges": true
        },
        "placementGroup": {
            "type": "string",
            "oneOf": [
                {
                    "type": "string"
                },
                {
                    "type": "string",
                    "$ref": "#/types/aws:ec2/placementGroup:PlacementGroup"
                }
            ],
            "description": "Name of the placement group into which you'll launch your instances, if any.\n"
        },
        "protectFromScaleIn": {
            "type": "boolean",
            "description": "Whether newly launched instances\nare automatically protected from termination by Amazon EC2 Auto Scaling when\nscaling in. For more information about preventing instances from terminating\non scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)\nin the Amazon EC2 Auto Scaling User Guide.\n"
        },
        "serviceLinkedRoleArn": {
            "type": "string",
            "description": "ARN of the service-linked role that the ASG will use to call other AWS services\n"
        },
        "suspendedProcesses": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.\nNote that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.\n"
        },
        "tags": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:autoscaling/GroupTag:GroupTag"
            },
            "description": "Configuration block(s) containing resource tags. See Tag below for more details.\n"
        },
        "targetGroupArns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "Set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.\n"
        },
        "terminationPolicies": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.\n"
        },
        "trafficSources": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:autoscaling/GroupTrafficSource:GroupTrafficSource"
            },
            "description": "Attaches one or more traffic sources to the specified Auto Scaling group.\n"
        },
        "vpcZoneIdentifiers": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availability_zones`.\n"
        },
        "waitForCapacityTimeout": {
            "type": "string",
            "description": "Maximum\n[duration](https://golang.org/pkg/time/#ParseDuration) that the provider should\nwait for ASG instances to be healthy before timing out. (See also Waiting\nfor Capacity below.) Setting this to \"0\" causes\nthe provider to skip all Capacity Waiting behavior.\n"
        },
        "waitForElbCapacity": {
            "type": "integer",
            "description": "Setting this will cause Pulumi to wait\nfor exactly this number of healthy instances from this Auto Scaling Group in\nall attached load balancers on both create and update operations. (Takes\nprecedence over `min_elb_capacity` behavior.)\n(See also Waiting for Capacity below.)\n"
        },
        "warmPool": {
            "$ref": "#/types/aws:autoscaling/GroupWarmPool:GroupWarmPool",
            "description": "If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)\nto the specified Auto Scaling group. Defined below\n"
        }
    },
    "requiredInputs": [
        "maxSize",
        "minSize"
    ],
    "stateInputs": {
        "description": "Input properties used for looking up and filtering Group resources.\n",
        "properties": {
            "arn": {
                "type": "string",
                "description": "ARN for this Auto Scaling Group\n"
            },
            "availabilityZones": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the `vpc_zone_identifier` attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with `vpc_zone_identifier`.\n"
            },
            "capacityRebalance": {
                "type": "boolean",
                "description": "Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.\n"
            },
            "context": {
                "type": "string",
                "description": "Reserved.\n"
            },
            "defaultCooldown": {
                "type": "integer",
                "description": "Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.\n"
            },
            "defaultInstanceWarmup": {
                "type": "integer",
                "description": "Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html))\n"
            },
            "desiredCapacity": {
                "type": "integer",
                "description": "Number of Amazon EC2 instances that\nshould be running in the group. (See also Waiting for\nCapacity below.)\n"
            },
            "desiredCapacityType": {
                "type": "string",
                "description": "The unit of measurement for the value specified for `desired_capacity`. Supported for attribute-based instance type selection only. Valid values: `\"units\"`, `\"vcpu\"`, `\"memory-mib\"`.\n"
            },
            "enabledMetrics": {
                "type": "array",
                "items": {
                    "type": "string",
                    "$ref": "#/types/aws:autoscaling/metrics:Metric"
                },
                "description": "List of metrics to collect. The allowed values are defined by the [underlying AWS API](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_EnableMetricsCollection.html).\n"
            },
            "forceDelete": {
                "type": "boolean",
                "description": "Allows deleting the Auto Scaling Group without waiting\nfor all instances in the pool to terminate. You can force an Auto Scaling Group to delete\neven if it's in the process of scaling a resource. Normally, this provider\ndrains all the instances before deleting the group. This bypasses that\nbehavior and potentially leaves resources dangling.\n"
            },
            "forceDeleteWarmPool": {
                "type": "boolean",
                "description": "Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.\n"
            },
            "healthCheckGracePeriod": {
                "type": "integer",
                "description": "Time (in seconds) after instance comes into service before checking health.\n"
            },
            "healthCheckType": {
                "type": "string",
                "description": "\"EC2\" or \"ELB\". Controls how health checking is done.\n"
            },
            "ignoreFailedScalingActivities": {
                "type": "boolean",
                "description": "Whether to ignore failed [Auto Scaling scaling activities](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html) while waiting for capacity. The default is `false` -- failed scaling activities cause errors to be returned.\n"
            },
            "initialLifecycleHooks": {
                "type": "array",
                "items": {
                    "$ref": "#/types/aws:autoscaling/GroupInitialLifecycleHook:GroupInitialLifecycleHook"
                },
                "description": "One or more\n[Lifecycle Hooks](http://docs.aws.amazon.com/autoscaling/latest/userguide/lifecycle-hooks.html)\nto attach to the Auto Scaling Group **before** instances are launched. The\nsyntax is exactly the same as the separate\n`aws.autoscaling.LifecycleHook`\nresource, without the `autoscaling_group_name` attribute. Please note that this will only work when creating\na new Auto Scaling Group. For all other use-cases, please use `aws.autoscaling.LifecycleHook` resource.\n",
                "willReplaceOnChanges": true
            },
            "instanceMaintenancePolicy": {
                "$ref": "#/types/aws:autoscaling/GroupInstanceMaintenancePolicy:GroupInstanceMaintenancePolicy",
                "description": "If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.\n"
            },
            "instanceRefresh": {
                "$ref": "#/types/aws:autoscaling/GroupInstanceRefresh:GroupInstanceRefresh",
                "description": "If this block is configured, start an\n[Instance Refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html)\nwhen this Auto Scaling Group is updated. Defined below.\n"
            },
            "launchConfiguration": {
                "type": "string",
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "string",
                        "$ref": "#/types/aws:ec2/launchConfiguration:LaunchConfiguration"
                    }
                ],
                "description": "Name of the launch configuration to use.\n"
            },
            "launchTemplate": {
                "$ref": "#/types/aws:autoscaling/GroupLaunchTemplate:GroupLaunchTemplate",
                "description": "Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.\n"
            },
            "loadBalancers": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of elastic load balancer names to add to the autoscaling\ngroup names. Only valid for classic load balancers. For ALBs, use `target_group_arns` instead. To remove all load balancer attachments an empty list should be specified.\n"
            },
            "maxInstanceLifetime": {
                "type": "integer",
                "description": "Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.\n"
            },
            "maxSize": {
                "type": "integer",
                "description": "Maximum size of the Auto Scaling Group.\n"
            },
            "metricsGranularity": {
                "type": "string",
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "string",
                        "$ref": "#/types/aws:autoscaling/MetricsGranularity:MetricsGranularity"
                    }
                ],
                "description": "Granularity to associate with the metrics to collect. The only valid value is `1Minute`. Default is `1Minute`.\n"
            },
            "minElbCapacity": {
                "type": "integer",
                "description": "Setting this causes Pulumi to wait for\nthis number of instances from this Auto Scaling Group to show up healthy in the\nELB only on creation. Updates will not wait on ELB instance number changes.\n(See also Waiting for Capacity below.)\n"
            },
            "minSize": {
                "type": "integer",
                "description": "Minimum size of the Auto Scaling Group.\n(See also Waiting for Capacity below.)\n"
            },
            "mixedInstancesPolicy": {
                "$ref": "#/types/aws:autoscaling/GroupMixedInstancesPolicy:GroupMixedInstancesPolicy",
                "description": "Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.\n"
            },
            "name": {
                "type": "string",
                "description": "Name of the Auto Scaling Group. By default generated by Pulumi. Conflicts with `name_prefix`.\n",
                "willReplaceOnChanges": true
            },
            "namePrefix": {
                "type": "string",
                "description": "Creates a unique name beginning with the specified\nprefix. Conflicts with `name`.\n",
                "willReplaceOnChanges": true
            },
            "placementGroup": {
                "type": "string",
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "string",
                        "$ref": "#/types/aws:ec2/placementGroup:PlacementGroup"
                    }
                ],
                "description": "Name of the placement group into which you'll launch your instances, if any.\n"
            },
            "predictedCapacity": {
                "type": "integer",
                "description": "Predicted capacity of the group.\n"
            },
            "protectFromScaleIn": {
                "type": "boolean",
                "description": "Whether newly launched instances\nare automatically protected from termination by Amazon EC2 Auto Scaling when\nscaling in. For more information about preventing instances from terminating\non scale in, see [Using instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)\nin the Amazon EC2 Auto Scaling User Guide.\n"
            },
            "serviceLinkedRoleArn": {
                "type": "string",
                "description": "ARN of the service-linked role that the ASG will use to call other AWS services\n"
            },
            "suspendedProcesses": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of processes to suspend for the Auto Scaling Group. The allowed values are `Launch`, `Terminate`, `HealthCheck`, `ReplaceUnhealthy`, `AZRebalance`, `AlarmNotification`, `ScheduledActions`, `AddToLoadBalancer`, `InstanceRefresh`.\nNote that if you suspend either the `Launch` or `Terminate` process types, it can prevent your Auto Scaling Group from functioning properly.\n"
            },
            "tags": {
                "type": "array",
                "items": {
                    "$ref": "#/types/aws:autoscaling/GroupTag:GroupTag"
                },
                "description": "Configuration block(s) containing resource tags. See Tag below for more details.\n"
            },
            "targetGroupArns": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "Set of `aws.alb.TargetGroup` ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.\n"
            },
            "terminationPolicies": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are `OldestInstance`, `NewestInstance`, `OldestLaunchConfiguration`, `ClosestToNextInstanceHour`, `OldestLaunchTemplate`, `AllocationStrategy`, `Default`. Additionally, the ARN of a Lambda function can be specified for custom termination policies.\n"
            },
            "trafficSources": {
                "type": "array",
                "items": {
                    "$ref": "#/types/aws:autoscaling/GroupTrafficSource:GroupTrafficSource"
                },
                "description": "Attaches one or more traffic sources to the specified Auto Scaling group.\n"
            },
            "vpcZoneIdentifiers": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with `availability_zones`.\n"
            },
            "waitForCapacityTimeout": {
                "type": "string",
                "description": "Maximum\n[duration](https://golang.org/pkg/time/#ParseDuration) that the provider should\nwait for ASG instances to be healthy before timing out. (See also Waiting\nfor Capacity below.) Setting this to \"0\" causes\nthe provider to skip all Capacity Waiting behavior.\n"
            },
            "waitForElbCapacity": {
                "type": "integer",
                "description": "Setting this will cause Pulumi to wait\nfor exactly this number of healthy instances from this Auto Scaling Group in\nall attached load balancers on both create and update operations. (Takes\nprecedence over `min_elb_capacity` behavior.)\n(See also Waiting for Capacity below.)\n"
            },
            "warmPool": {
                "$ref": "#/types/aws:autoscaling/GroupWarmPool:GroupWarmPool",
                "description": "If this block is configured, add a [Warm Pool](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html)\nto the specified Auto Scaling group. Defined below\n"
            },
            "warmPoolSize": {
                "type": "integer",
                "description": "Current size of the warm pool.\n"
            }
        },
        "type": "object"
    }
}