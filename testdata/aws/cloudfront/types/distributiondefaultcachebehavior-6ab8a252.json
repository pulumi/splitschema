{
            "properties": {
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.\n"
                },
                "cachePolicyId": {
                    "type": "string",
                    "description": "Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.\n"
                },
                "cachedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Controls whether CloudFront caches the response to requests using the specified HTTP methods.\n"
                },
                "compress": {
                    "type": "boolean",
                    "description": "Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).\n"
                },
                "defaultTtl": {
                    "type": "integer",
                    "description": "Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.\n"
                },
                "fieldLevelEncryptionId": {
                    "type": "string",
                    "description": "Field level encryption configuration ID.\n"
                },
                "forwardedValues": {
                    "$ref": "#/types/aws:cloudfront/DistributionDefaultCacheBehaviorForwardedValues:DistributionDefaultCacheBehaviorForwardedValues",
                    "description": "The forwarded values configuration that specifies how CloudFront handles query strings, cookies and headers (maximum one).\n"
                },
                "functionAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aws:cloudfront/DistributionDefaultCacheBehaviorFunctionAssociation:DistributionDefaultCacheBehaviorFunctionAssociation"
                    },
                    "description": "A config block that triggers a cloudfront function with specific actions (maximum 2).\n"
                },
                "lambdaFunctionAssociations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/aws:cloudfront/DistributionDefaultCacheBehaviorLambdaFunctionAssociation:DistributionDefaultCacheBehaviorLambdaFunctionAssociation"
                    },
                    "description": "A config block that triggers a lambda function with specific actions (maximum 4).\n"
                },
                "maxTtl": {
                    "type": "integer",
                    "description": "Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.\n"
                },
                "minTtl": {
                    "type": "integer",
                    "description": "Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.\n"
                },
                "originRequestPolicyId": {
                    "type": "string",
                    "description": "Unique identifier of the origin request policy that is attached to the behavior.\n"
                },
                "realtimeLogConfigArn": {
                    "type": "string",
                    "description": "ARN of the real-time log configuration that is attached to this cache behavior.\n"
                },
                "responseHeadersPolicyId": {
                    "type": "string",
                    "description": "Identifier for a response headers policy.\n"
                },
                "smoothStreaming": {
                    "type": "boolean",
                    "description": "Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.\n"
                },
                "targetOriginId": {
                    "type": "string",
                    "description": "Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.\n"
                },
                "trustedKeyGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.\n"
                },
                "trustedSigners": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.\n"
                },
                "viewerProtocolPolicy": {
                    "type": "string",
                    "description": "Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedMethods",
                "cachedMethods",
                "targetOriginId",
                "viewerProtocolPolicy"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedMethods",
                        "cachedMethods",
                        "defaultTtl",
                        "maxTtl",
                        "targetOriginId",
                        "trustedKeyGroups",
                        "trustedSigners",
                        "viewerProtocolPolicy"
                    ]
                }
            }
        }