{
    "properties": {
        "attributeTypesSelector": {
            "$ref": "#/types/aws:customerprofiles/DomainRuleBasedMatchingAttributeTypesSelector:DomainRuleBasedMatchingAttributeTypesSelector",
            "description": "A block that configures information about the `AttributeTypesSelector` where the rule-based identity resolution uses to match profiles. Documented below.\n"
        },
        "conflictResolution": {
            "$ref": "#/types/aws:customerprofiles/DomainRuleBasedMatchingConflictResolution:DomainRuleBasedMatchingConflictResolution",
            "description": "A block that specifies how the auto-merging process should resolve conflicts between different profiles. Documented below.\n"
        },
        "enabled": {
            "type": "boolean",
            "description": "The flag that enables the rule-based matching process of duplicate profiles.\n"
        },
        "exportingConfig": {
            "$ref": "#/types/aws:customerprofiles/DomainRuleBasedMatchingExportingConfig:DomainRuleBasedMatchingExportingConfig",
            "description": "A block that specifies the configuration for exporting Identity Resolution results. Documented below.\n"
        },
        "matchingRules": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:customerprofiles/DomainRuleBasedMatchingMatchingRule:DomainRuleBasedMatchingMatchingRule"
            },
            "description": "A block that configures how the rule-based matching process should match profiles. You can have up to 15 `rule` in the `natching_rules`. Documented below.\n"
        },
        "maxAllowedRuleLevelForMatching": {
            "type": "integer",
            "description": "Indicates the maximum allowed rule level for matching.\n"
        },
        "maxAllowedRuleLevelForMerging": {
            "type": "integer",
            "description": "Indicates the maximum allowed rule level for merging.\n"
        },
        "status": {
            "type": "string"
        }
    },
    "type": "object",
    "required": [
        "enabled"
    ],
    "language": {
        "nodejs": {
            "requiredOutputs": [
                "enabled",
                "status"
            ]
        }
    }
}