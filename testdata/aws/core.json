{
    "name": "aws",
    "description": "A Pulumi package for creating and managing Amazon Web Services (AWS) cloud resources.",
    "keywords": [
        "pulumi",
        "aws"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`aws` Terraform Provider](https://github.com/hashicorp/terraform-provider-aws).",
    "repository": "https://github.com/pulumi/pulumi-aws",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "accessanalyzer": "AccessAnalyzer",
                "account": "Account",
                "acm": "Acm",
                "acmpca": "Acmpca",
                "alb": "Alb",
                "amp": "Amp",
                "amplify": "Amplify",
                "apigateway": "ApiGateway",
                "apigatewayv2": "ApiGatewayV2",
                "appautoscaling": "AppAutoScaling",
                "appconfig": "AppConfig",
                "appflow": "AppFlow",
                "appintegrations": "AppIntegrations",
                "applicationinsights": "ApplicationInsights",
                "applicationloadbalancing": "ApplicationLoadBalancing",
                "appmesh": "AppMesh",
                "apprunner": "AppRunner",
                "appstream": "AppStream",
                "appsync": "AppSync",
                "athena": "Athena",
                "auditmanager": "Auditmanager",
                "autoscaling": "AutoScaling",
                "autoscalingplans": "AutoScalingPlans",
                "aws": "Aws",
                "backup": "Backup",
                "batch": "Batch",
                "bedrockfoundation": "BedrockFoundation",
                "bedrockmodel": "BedrockModel",
                "budgets": "Budgets",
                "cfg": "Cfg",
                "chime": "Chime",
                "chimesdkmediapipelines": "ChimeSDKMediaPipelines",
                "cleanrooms": "CleanRooms",
                "cloud9": "Cloud9",
                "cloudcontrol": "CloudControl",
                "cloudformation": "CloudFormation",
                "cloudfront": "CloudFront",
                "cloudhsmv2": "CloudHsmV2",
                "cloudsearch": "CloudSearch",
                "cloudtrail": "CloudTrail",
                "cloudwatch": "CloudWatch",
                "codeartifact": "CodeArtifact",
                "codebuild": "CodeBuild",
                "codecatalyst": "CodeCatalyst",
                "codecommit": "CodeCommit",
                "codedeploy": "CodeDeploy",
                "codeguruprofiler": "CodeGuruProfiler",
                "codegurureviewer": "CodeGuruReviewer",
                "codepipeline": "CodePipeline",
                "codestarconnections": "CodeStarConnections",
                "codestarnotifications": "CodeStarNotifications",
                "cognito": "Cognito",
                "comprehend": "Comprehend",
                "connect": "Connect",
                "controltower": "ControlTower",
                "costexplorer": "CostExplorer",
                "cur": "Cur",
                "customerprofiles": "CustomerProfiles",
                "dataexchange": "DataExchange",
                "datapipeline": "DataPipeline",
                "datasync": "DataSync",
                "dax": "Dax",
                "detective": "Detective",
                "devicefarm": "DeviceFarm",
                "directconnect": "DirectConnect",
                "directoryservice": "DirectoryService",
                "dlm": "Dlm",
                "dms": "Dms",
                "docdb": "DocDB",
                "dynamodb": "DynamoDB",
                "ebs": "Ebs",
                "ec2": "Ec2",
                "ec2clientvpn": "Ec2ClientVpn",
                "ec2transitgateway": "Ec2TransitGateway",
                "ecr": "Ecr",
                "ecrpublic": "EcrPublic",
                "ecs": "Ecs",
                "efs": "Efs",
                "eks": "Eks",
                "elasticache": "ElastiCache",
                "elasticbeanstalk": "ElasticBeanstalk",
                "elasticloadbalancing": "ElasticLoadBalancing",
                "elasticloadbalancingv2": "ElasticLoadBalancingV2",
                "elasticsearch": "ElasticSearch",
                "elastictranscoder": "ElasticTranscoder",
                "elb": "Elb",
                "emr": "Emr",
                "emrcontainers": "EmrContainers",
                "emrserverless": "EmrServerless",
                "evidently": "Evidently",
                "finspace": "FinSpace",
                "fis": "Fis",
                "fms": "Fms",
                "fsx": "Fsx",
                "gamelift": "GameLift",
                "glacier": "Glacier",
                "globalaccelerator": "GlobalAccelerator",
                "glue": "Glue",
                "grafana": "Grafana",
                "guardduty": "GuardDuty",
                "iam": "Iam",
                "identitystore": "IdentityStore",
                "imagebuilder": "ImageBuilder",
                "index": "index",
                "inspector": "Inspector",
                "inspector2": "Inspector2",
                "iot": "Iot",
                "ivs": "Ivs",
                "ivschat": "IvsChat",
                "kendra": "Kendra",
                "keyspaces": "Keyspaces",
                "kinesis": "Kinesis",
                "kinesisanalyticsv2": "KinesisAnalyticsV2",
                "kms": "Kms",
                "lakeformation": "LakeFormation",
                "lambda": "Lambda",
                "lb": "LB",
                "lex": "Lex",
                "licensemanager": "LicenseManager",
                "lightsail": "LightSail",
                "location": "Location",
                "macie": "Macie",
                "macie2": "Macie2",
                "mediaconvert": "MediaConvert",
                "medialive": "MediaLive",
                "mediapackage": "MediaPackage",
                "mediastore": "MediaStore",
                "memorydb": "MemoryDb",
                "mq": "Mq",
                "msk": "Msk",
                "mskconnect": "MskConnect",
                "mwaa": "Mwaa",
                "neptune": "Neptune",
                "networkfirewall": "NetworkFirewall",
                "networkmanager": "NetworkManager",
                "oam": "Oam",
                "opensearch": "OpenSearch",
                "opsworks": "OpsWorks",
                "organizations": "Organizations",
                "outposts": "Outposts",
                "pinpoint": "Pinpoint",
                "pipes": "Pipes",
                "polly": "Polly",
                "pricing": "Pricing",
                "qldb": "Qldb",
                "quicksight": "Quicksight",
                "ram": "Ram",
                "rbin": "Rbin",
                "rds": "Rds",
                "redshift": "RedShift",
                "redshiftdata": "RedshiftData",
                "redshiftserverless": "RedshiftServerless",
                "resourceexplorer": "ResourceExplorer",
                "resourcegroups": "ResourceGroups",
                "resourcegroupstaggingapi": "ResourceGroupsTaggingApi",
                "rolesanywhere": "RolesAnywhere",
                "route53": "Route53",
                "route53domains": "Route53Domains",
                "route53recoverycontrol": "Route53RecoveryControl",
                "route53recoveryreadiness": "Route53RecoveryReadiness",
                "rum": "Rum",
                "s3": "S3",
                "s3control": "S3Control",
                "s3outposts": "S3Outposts",
                "sagemaker": "Sagemaker",
                "scheduler": "Scheduler",
                "schemas": "Schemas",
                "secretsmanager": "SecretsManager",
                "securityhub": "SecurityHub",
                "securitylake": "SecurityLake",
                "serverlessrepository": "ServerlessRepository",
                "servicecatalog": "ServiceCatalog",
                "servicediscovery": "ServiceDiscovery",
                "servicequotas": "ServiceQuotas",
                "ses": "Ses",
                "sesv2": "SesV2",
                "sfn": "Sfn",
                "shield": "Shield",
                "signer": "Signer",
                "simpledb": "SimpleDB",
                "sns": "Sns",
                "sqs": "Sqs",
                "ssm": "Ssm",
                "ssmcontacts": "SsmContacts",
                "ssmincidents": "SsmIncidents",
                "ssoadmin": "SsoAdmin",
                "storagegateway": "StorageGateway",
                "swf": "Swf",
                "synthetics": "Synthetics",
                "timestreamwrite": "TimestreamWrite",
                "transcribe": "Transcribe",
                "transfer": "Transfer",
                "verifiedaccess": "VerifiedAccess",
                "vpc": "Vpc",
                "vpclattice": "VpcLattice",
                "waf": "Waf",
                "wafregional": "WafRegional",
                "wafv2": "WafV2",
                "worklink": "WorkLink",
                "workspaces": "Workspaces",
                "xray": "Xray"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-aws/sdk/v6/go/aws",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing Amazon Web Services (AWS) cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-aws)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-aws` repo](https://github.com/pulumi/pulumi-aws/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-aws` repo](https://github.com/hashicorp/terraform-provider-aws/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0",
                "builtin-modules": "3.0.0",
                "mime": "^2.0.0",
                "read-package-tree": "^5.2.1",
                "resolve": "^1.7.1"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-aws)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-aws` repo](https://github.com/pulumi/pulumi-aws/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-aws` repo](https://github.com/hashicorp/terraform-provider-aws/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "accessKey": {
                "type": "string",
                "description": "The access key for API operations. You can retrieve this from the 'Security \u0026 Credentials' section of the AWS console.\n"
            },
            "allowedAccountIds": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "assumeRole": {
                "$ref": "#/types/aws:config/assumeRole:assumeRole"
            },
            "assumeRoleWithWebIdentity": {
                "$ref": "#/types/aws:config/assumeRoleWithWebIdentity:assumeRoleWithWebIdentity"
            },
            "customCaBundle": {
                "type": "string",
                "description": "File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment\nvariable. (Setting `ca_bundle` in the shared config file is not supported.)\n"
            },
            "defaultTags": {
                "$ref": "#/types/aws:config/defaultTags:defaultTags",
                "description": "Configuration block with settings to default resource tags across all resources.\n"
            },
            "ec2MetadataServiceEndpoint": {
                "type": "string",
                "description": "Address of the EC2 metadata service endpoint to use. Can also be configured using the\n`AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.\n"
            },
            "ec2MetadataServiceEndpointMode": {
                "type": "string",
                "description": "Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the\n`AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.\n"
            },
            "endpoints": {
                "type": "array",
                "items": {
                    "$ref": "#/types/aws:config/endpoints:endpoints"
                }
            },
            "forbiddenAccountIds": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "httpProxy": {
                "type": "string",
                "description": "URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or\n`http_proxy` environment variables.\n"
            },
            "httpsProxy": {
                "type": "string",
                "description": "URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or\n`https_proxy` environment variables.\n"
            },
            "ignoreTags": {
                "$ref": "#/types/aws:config/ignoreTags:ignoreTags",
                "description": "Configuration block with settings to ignore resource tags across all resources.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted, default value is `false`\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.\n"
            },
            "noProxy": {
                "type": "string",
                "description": "Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or\n`no_proxy` environment variables.\n"
            },
            "profile": {
                "type": "string",
                "description": "The profile for API operations. If not set, the default profile created with `aws configure` will be used.\n"
            },
            "region": {
                "type": "string",
                "$ref": "#/types/aws:index/region:Region",
                "description": "The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.\n",
                "defaultInfo": {
                    "environment": [
                        "AWS_REGION",
                        "AWS_DEFAULT_REGION"
                    ]
                }
            },
            "retryMode": {
                "type": "string",
                "description": "Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the\n`AWS_RETRY_MODE` environment variable.\n"
            },
            "s3UsEast1RegionalEndpoint": {
                "type": "string",
                "description": "Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid\nvalues are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment\nvariable or the `s3_us_east_1_regional_endpoint` shared config file parameter\n"
            },
            "s3UsePathStyle": {
                "type": "boolean",
                "description": "Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By\ndefault, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY).\nSpecific to the Amazon S3 service.\n"
            },
            "secretKey": {
                "type": "string",
                "description": "The secret key for API operations. You can retrieve this from the 'Security \u0026 Credentials' section of the AWS console.\n"
            },
            "sharedConfigFiles": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of paths to shared config files. If not set, defaults to [~/.aws/config].\n"
            },
            "sharedCredentialsFiles": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].\n"
            },
            "skipCredentialsValidation": {
                "type": "boolean",
                "description": "Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS\navailable/implemented.\n",
                "default": false
            },
            "skipMetadataApiCheck": {
                "type": "boolean",
                "description": "Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.\n",
                "default": true
            },
            "skipRegionValidation": {
                "type": "boolean",
                "description": "Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are\nnot public (yet).\n",
                "default": true
            },
            "skipRequestingAccountId": {
                "type": "boolean",
                "description": "Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.\n"
            },
            "stsRegion": {
                "type": "string",
                "description": "The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2.\n"
            },
            "token": {
                "type": "string",
                "description": "session token. A session token is only required if you are using temporary security credentials.\n"
            },
            "useDualstackEndpoint": {
                "type": "boolean",
                "description": "Resolve an endpoint with DualStack capability\n"
            },
            "useFipsEndpoint": {
                "type": "boolean",
                "description": "Resolve an endpoint with FIPS capability\n"
            }
        }
    },
    "provider": {
        "description": "The provider type for the aws package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accessKey": {
                "type": "string",
                "description": "The access key for API operations. You can retrieve this from the 'Security \u0026 Credentials' section of the AWS console.\n"
            },
            "allowedAccountIds": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "assumeRole": {
                "$ref": "#/types/aws:index/ProviderAssumeRole:ProviderAssumeRole"
            },
            "assumeRoleWithWebIdentity": {
                "$ref": "#/types/aws:index/ProviderAssumeRoleWithWebIdentity:ProviderAssumeRoleWithWebIdentity"
            },
            "customCaBundle": {
                "type": "string",
                "description": "File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment\nvariable. (Setting `ca_bundle` in the shared config file is not supported.)\n"
            },
            "defaultTags": {
                "$ref": "#/types/aws:index/ProviderDefaultTags:ProviderDefaultTags",
                "description": "Configuration block with settings to default resource tags across all resources.\n"
            },
            "ec2MetadataServiceEndpoint": {
                "type": "string",
                "description": "Address of the EC2 metadata service endpoint to use. Can also be configured using the\n`AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.\n"
            },
            "ec2MetadataServiceEndpointMode": {
                "type": "string",
                "description": "Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the\n`AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.\n"
            },
            "endpoints": {
                "type": "array",
                "items": {
                    "$ref": "#/types/aws:index/ProviderEndpoint:ProviderEndpoint"
                }
            },
            "forbiddenAccountIds": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "httpProxy": {
                "type": "string",
                "description": "URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or\n`http_proxy` environment variables.\n"
            },
            "httpsProxy": {
                "type": "string",
                "description": "URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or\n`https_proxy` environment variables.\n"
            },
            "ignoreTags": {
                "$ref": "#/types/aws:index/ProviderIgnoreTags:ProviderIgnoreTags",
                "description": "Configuration block with settings to ignore resource tags across all resources.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted, default value is `false`\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.\n"
            },
            "noProxy": {
                "type": "string",
                "description": "Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or\n`no_proxy` environment variables.\n"
            },
            "profile": {
                "type": "string",
                "description": "The profile for API operations. If not set, the default profile created with `aws configure` will be used.\n"
            },
            "region": {
                "type": "string",
                "$ref": "#/types/aws:index/region:Region",
                "description": "The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.\n"
            },
            "retryMode": {
                "type": "string",
                "description": "Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the\n`AWS_RETRY_MODE` environment variable.\n"
            },
            "s3UsEast1RegionalEndpoint": {
                "type": "string",
                "description": "Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid\nvalues are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment\nvariable or the `s3_us_east_1_regional_endpoint` shared config file parameter\n"
            },
            "s3UsePathStyle": {
                "type": "boolean",
                "description": "Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By\ndefault, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY).\nSpecific to the Amazon S3 service.\n"
            },
            "secretKey": {
                "type": "string",
                "description": "The secret key for API operations. You can retrieve this from the 'Security \u0026 Credentials' section of the AWS console.\n"
            },
            "sharedConfigFiles": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of paths to shared config files. If not set, defaults to [~/.aws/config].\n"
            },
            "sharedCredentialsFiles": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].\n"
            },
            "skipCredentialsValidation": {
                "type": "boolean",
                "description": "Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS\navailable/implemented.\n"
            },
            "skipMetadataApiCheck": {
                "type": "boolean",
                "description": "Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.\n"
            },
            "skipRegionValidation": {
                "type": "boolean",
                "description": "Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are\nnot public (yet).\n"
            },
            "skipRequestingAccountId": {
                "type": "boolean",
                "description": "Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.\n"
            },
            "stsRegion": {
                "type": "string",
                "description": "The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2.\n"
            },
            "token": {
                "type": "string",
                "description": "session token. A session token is only required if you are using temporary security credentials.\n"
            },
            "useDualstackEndpoint": {
                "type": "boolean",
                "description": "Resolve an endpoint with DualStack capability\n"
            },
            "useFipsEndpoint": {
                "type": "boolean",
                "description": "Resolve an endpoint with FIPS capability\n"
            }
        },
        "inputProperties": {
            "accessKey": {
                "type": "string",
                "description": "The access key for API operations. You can retrieve this from the 'Security \u0026 Credentials' section of the AWS console.\n"
            },
            "allowedAccountIds": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "assumeRole": {
                "$ref": "#/types/aws:index/ProviderAssumeRole:ProviderAssumeRole"
            },
            "assumeRoleWithWebIdentity": {
                "$ref": "#/types/aws:index/ProviderAssumeRoleWithWebIdentity:ProviderAssumeRoleWithWebIdentity"
            },
            "customCaBundle": {
                "type": "string",
                "description": "File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment\nvariable. (Setting `ca_bundle` in the shared config file is not supported.)\n"
            },
            "defaultTags": {
                "$ref": "#/types/aws:index/ProviderDefaultTags:ProviderDefaultTags",
                "description": "Configuration block with settings to default resource tags across all resources.\n"
            },
            "ec2MetadataServiceEndpoint": {
                "type": "string",
                "description": "Address of the EC2 metadata service endpoint to use. Can also be configured using the\n`AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.\n"
            },
            "ec2MetadataServiceEndpointMode": {
                "type": "string",
                "description": "Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the\n`AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.\n"
            },
            "endpoints": {
                "type": "array",
                "items": {
                    "$ref": "#/types/aws:index/ProviderEndpoint:ProviderEndpoint"
                }
            },
            "forbiddenAccountIds": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "httpProxy": {
                "type": "string",
                "description": "URL of a proxy to use for HTTP requests when accessing the AWS API. Can also be set using the `HTTP_PROXY` or\n`http_proxy` environment variables.\n"
            },
            "httpsProxy": {
                "type": "string",
                "description": "URL of a proxy to use for HTTPS requests when accessing the AWS API. Can also be set using the `HTTPS_PROXY` or\n`https_proxy` environment variables.\n"
            },
            "ignoreTags": {
                "$ref": "#/types/aws:index/ProviderIgnoreTags:ProviderIgnoreTags",
                "description": "Configuration block with settings to ignore resource tags across all resources.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted, default value is `false`\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.\n"
            },
            "noProxy": {
                "type": "string",
                "description": "Comma-separated list of hosts that should not use HTTP or HTTPS proxies. Can also be set using the `NO_PROXY` or\n`no_proxy` environment variables.\n"
            },
            "profile": {
                "type": "string",
                "description": "The profile for API operations. If not set, the default profile created with `aws configure` will be used.\n"
            },
            "region": {
                "type": "string",
                "$ref": "#/types/aws:index/region:Region",
                "description": "The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.\n",
                "defaultInfo": {
                    "environment": [
                        "AWS_REGION",
                        "AWS_DEFAULT_REGION"
                    ]
                }
            },
            "retryMode": {
                "type": "string",
                "description": "Specifies how retries are attempted. Valid values are `standard` and `adaptive`. Can also be configured using the\n`AWS_RETRY_MODE` environment variable.\n"
            },
            "s3UsEast1RegionalEndpoint": {
                "type": "string",
                "description": "Specifies whether S3 API calls in the `us-east-1` region use the legacy global endpoint or a regional endpoint. Valid\nvalues are `legacy` or `regional`. Can also be configured using the `AWS_S3_US_EAST_1_REGIONAL_ENDPOINT` environment\nvariable or the `s3_us_east_1_regional_endpoint` shared config file parameter\n"
            },
            "s3UsePathStyle": {
                "type": "boolean",
                "description": "Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By\ndefault, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY).\nSpecific to the Amazon S3 service.\n"
            },
            "secretKey": {
                "type": "string",
                "description": "The secret key for API operations. You can retrieve this from the 'Security \u0026 Credentials' section of the AWS console.\n"
            },
            "sharedConfigFiles": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of paths to shared config files. If not set, defaults to [~/.aws/config].\n"
            },
            "sharedCredentialsFiles": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].\n"
            },
            "skipCredentialsValidation": {
                "type": "boolean",
                "description": "Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS\navailable/implemented.\n",
                "default": false
            },
            "skipMetadataApiCheck": {
                "type": "boolean",
                "description": "Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.\n",
                "default": true
            },
            "skipRegionValidation": {
                "type": "boolean",
                "description": "Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are\nnot public (yet).\n",
                "default": true
            },
            "skipRequestingAccountId": {
                "type": "boolean",
                "description": "Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.\n"
            },
            "stsRegion": {
                "type": "string",
                "description": "The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2.\n"
            },
            "token": {
                "type": "string",
                "description": "session token. A session token is only required if you are using temporary security credentials.\n"
            },
            "useDualstackEndpoint": {
                "type": "boolean",
                "description": "Resolve an endpoint with DualStack capability\n"
            },
            "useFipsEndpoint": {
                "type": "boolean",
                "description": "Resolve an endpoint with FIPS capability\n"
            }
        }
    }
}