{
    "properties": {
        "bucketColumns": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "description": "List of reducer grouping columns, clustering columns, and bucketing columns in the table.\n"
        },
        "columns": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:glue/CatalogTableStorageDescriptorColumn:CatalogTableStorageDescriptorColumn"
            },
            "description": "Configuration block for columns in the table. See `columns` below.\n"
        },
        "compressed": {
            "type": "boolean",
            "description": "Whether the data in the table is compressed.\n"
        },
        "inputFormat": {
            "type": "string",
            "description": "Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.\n"
        },
        "location": {
            "type": "string",
            "description": "Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.\n"
        },
        "numberOfBuckets": {
            "type": "integer",
            "description": "Must be specified if the table contains any dimension columns.\n"
        },
        "outputFormat": {
            "type": "string",
            "description": "Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.\n"
        },
        "parameters": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            },
            "description": "User-supplied properties in key-value form.\n"
        },
        "schemaReference": {
            "$ref": "#/types/aws:glue/CatalogTableStorageDescriptorSchemaReference:CatalogTableStorageDescriptorSchemaReference",
            "description": "Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.\n"
        },
        "serDeInfo": {
            "$ref": "#/types/aws:glue/CatalogTableStorageDescriptorSerDeInfo:CatalogTableStorageDescriptorSerDeInfo",
            "description": "Configuration block for serialization and deserialization (\"SerDe\") information. See `ser_de_info` below.\n"
        },
        "skewedInfo": {
            "$ref": "#/types/aws:glue/CatalogTableStorageDescriptorSkewedInfo:CatalogTableStorageDescriptorSkewedInfo",
            "description": "Configuration block with information about values that appear very frequently in a column (skewed values). See `skewed_info` below.\n"
        },
        "sortColumns": {
            "type": "array",
            "items": {
                "$ref": "#/types/aws:glue/CatalogTableStorageDescriptorSortColumn:CatalogTableStorageDescriptorSortColumn"
            },
            "description": "Configuration block for the sort order of each bucket in the table. See `sort_columns` below.\n"
        },
        "storedAsSubDirectories": {
            "type": "boolean",
            "description": "Whether the table data is stored in subdirectories.\n"
        }
    },
    "type": "object",
    "language": {
        "nodejs": {
            "requiredOutputs": [
                "columns"
            ]
        }
    }
}